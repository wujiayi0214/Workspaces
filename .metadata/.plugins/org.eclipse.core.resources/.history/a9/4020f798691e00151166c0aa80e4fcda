package signsocket;


import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.InetSocketAddress;
import java.net.Socket;

import signdata.User;




public class SocketClient
{
	// 设置服务器IP和端口
    public static Socket m_socket = null;
    
    //private static PrintWriter  _printWriter    = null;         
    
    //public static InputStream in = null;
    
    //public static BufferedReader br=null;
    
    public static DataOutputStream out=null;
    public static DataInputStream in=null;
    //public static BufferedReader inbuff=null;
    private static final String SERVER_IP   = "10.0.51.141"; //"192.168.1.200";
    private static final int    SERVER_PORT      = 6666;//7777;
    
    public static Boolean create()
    {        

        try
        {
        	m_socket = new Socket(SERVER_IP, SERVER_PORT);
            in = new DataInputStream(m_socket.getInputStream());
            out = new DataOutputStream(m_socket.getOutputStream());    

            m_socket.connect(new InetSocketAddress(SERVER_IP, SERVER_PORT), 5000);              //inbuff=new BufferedReader(new InputStreamReader(_socket.getInputStream()));
            
            //  发送数据
            PrintStream PrintStreamout=new PrintStream(socket.getOutputStream()); //发送数据,PrintStream最方便
            // 接收返回信息
            BufferedReader buf=new BufferedReader(newInputStreamReader(socket.getInputStream()));; //一次性接收完成读取Socket的输入流，在其中读出返回信息
            return true;        
        

        } 
        catch (IOException e) 
        {
        	System.out.println(e.toString());        
            
        	return false;
        }        

    }


    public static void close()
    {
    	try
    	{
    		//_printWriter.close();
    		out.close();
            in.close();                
            m_socket.close();
            if(m_socket.isClosed())
            	System.out.println("socket is closed...");        
                
        }        
        catch (Exception e)
    	{
            e.printStackTrace();
            System.out.println("socket isn't closed...");                
        }
    }

    public static void sendMessage(String message)
    {
        try
        {
        
            out.writeBytes(message);
            out.flush();
        }
        catch (Exception e)
        {
        	System.out.println(e.getStackTrace());        

        }
    }
    
    public static boolean LoginRequest(User user)
    {
    	//  发送登录请求到服务器LOGIN_REQUEST;length;{User}
    	
    	//  等待服务器的数据返回
    	
    	return true;
    }
    

}

