package signsocket;


import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;

import signdata.User;

/*
Socket 提供了getInputStream()和getOutputStream()用来得到输入流和输出流进行读写操作，
这两个方法分别返回InputStream和OutputStream。
为了方便读写，我们常常在InputStream和OutputStream基础上进行包装得到
DataInputStream, DataOutputStream, 
PrintStream, InputStreamReader, 
OutputStreamWriter, printWriter等。

示例代码：

PrintStream printStream = new PrintStream(new BufferedOutputStream(socket.getOutputStream()));

PrintWriter printWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), true)));

printWriter.println(String msg);

DataInputStream dis = new DataInputStream(socket.getInputStream());

BufferedReader br =  new BufferedReader(new InputStreamReader(socket.getInputStream()));

String line = br.readLine();
*/
public class SocketClient
{
	// 设置服务器IP和端口
    public static Socket m_socket = null;
    
    private static PrintWriter  m_printWriter    = null;         
        
    public static BufferedReader m_buffer=null;
    
    public static DataOutputStream out=null;
    public static DataInputStream in=null;
    //public static BufferedReader inbuff=null;
    private static final String SERVER_IP   = "10.0.51.141"; //"192.168.1.200";
    private static final int    SERVER_PORT      = 6666;//7777;
    
	public static synchronized SocketClient instance()
	{
		if (m_socket == null)
		{
			
			m_socket = new Socket(Const.SOCKET_SERVER,
					Const.SOCKET_PORT);
		}
		return m_socket;
	}
    }


    public static void close()
    {
    	try
    	{
    		//_printWriter.close();
    		out.close();
            in.close();                
            m_socket.close();
            if(m_socket.isClosed())
            	System.out.println("socket is closed...");        
                
        }        
        catch (Exception e)
    	{
            e.printStackTrace();
            System.out.println("socket isn't closed...");                
        }
    }

    public void sendMessage(String message)
    {
        try
        {
        
            out.writeBytes(message);
            out.flush();
        }
        catch (Exception e)
        {
        	System.out.println(e.getStackTrace());        

        }
    }
    
    public boolean LoginRequest(User user)
    {
    	//  发送登录请求到服务器LOGIN_REQUEST;length;{User}
    	
    	//  等待服务器的数据返回
    	
    	return true;
    }


}

