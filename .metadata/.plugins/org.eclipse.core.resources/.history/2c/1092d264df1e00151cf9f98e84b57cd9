package com.example.signpress;

//import android.support.v7.app.ActionBarActivity;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;












import android.os.AsyncTask;
import android.os.Bundle;
import android.os.StrictMode;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Button;
import android.widget.EditText;
import android.view.View;
import android.view.View.OnClickListener;




import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import signdata.User;
import signsocket.ClientRequest;
import signsocket.NetManager;
import signsocket.SocketClient;
import signsocket.SocketMessage;
import signsocket.SocketThreadManager;

/*
 * 原因： 
android.os.NetworkOnMainThreadException是说不要在主线程中访问网络，
这个是android3.0版本开始就强制程序不能在主线程中访问网络，要把访问网络放在独立的线程中。

在开发中，为了防止访问网络阻塞主线程，
一般都要把访问网络放在独立线程中或者异步线程AsyncTask中。

1、想要忽略这些强制策略问题的话，可以在onCreate()方法里面加上 
StrictMode.ThreadPolicy policy=new StrictMode.ThreadPolicy.Builder().permitAll().build();
StrictMode.setThreadPolicy(policy);
并在方法上加上@SuppressLint("NewApi")，重试，OK。

2、将网络访问放到单独线程中

3、将网络访问放到异步任务AsyncTask中
我们采用此方法实现
 * */

//@SuppressWarnings("deprecation")
public class LoginActivity extends Activity 
{
	
	//  用户名输入框
	private EditText editTextUsername;
	
	// 密码输入框
	private EditText editTextPassword;

	// 登录按钮
	private Button buttonLogin;
	

	
	private PrintWriter output ;
    
	
	
	private SocketClient m_socketClient;
	
	
	@Override
	@SuppressLint("NewApi")
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_login);		//  设置布局文件为activity_login.xml
		
		// 得到两个EditText对象
		this.editTextUsername = (EditText)findViewById(R.id.editTextUsername);
		this.editTextPassword = (EditText)findViewById(R.id.editTextPassword);
		
		// 得到两个button对象
		this.buttonLogin = (Button)findViewById(R.id.buttonLogin);
		
		//StrictMode.ThreadPolicy policy=new StrictMode.ThreadPolicy.Builder().permitAll().build();
		//StrictMode.setThreadPolicy(policy);
		
		//NetManager.instance().init(this);
		

		
		//SocketThreadManager.sharedInstance();
		
		
		// 为登录按钮绑定单击事件
		this.buttonLogin.setOnClickListener(new OnClickListener()
		{
			public void onClick(View v)
			{
				loginAsyncTask();
			}
			
			private void loginAsyncTask()
			{
		        new AsyncTask<String, Void, Object>()
		        {
		          
		          //在doInBackground 执行完成后，onPostExecute 方法将被UI 线程调用，
		          // 后台的计算结果将通过该方法传递到UI 线程，并且在界面上展示给用户.
		          protected void onPostExecute(Object result)
		          {
		            super.onPostExecute(result);
		            //activity_main_btn1.setText("请求结果为："+result);//可以更新UI
		        	//  获取文本框中的用户名和密码
					String username = editTextUsername.getText().toString();
					String password = editTextPassword.getText().toString();
					

					User user = new User(username, password);
					AppContext app =  new AppContext();
					app.setUser(user);
					

					SocketClient client = SocketClient.instance();
					SocketMessage message = new SocketMessage(ClientRequest.LOGIN_REQUEST, user);
					
					if(SocketClient.loginRequest(user) == true)
						Intent intent = new Intent();  
						//设置Intent的class属性，跳转到SecondActivity  
						intent.setClass(LoginActivity.this, TestActivity.class);  
						//为intent添加额外的信息  
						//intent.putExtra("Usename", username);  
						//intent.putExtra("Password", password); 
						//启动Activity  
						startActivity(intent);  
					}
					
		          }

		          //该方法运行在后台线程中，因此不能在该线程中更新UI，UI线程为主线程
		          protected Object doInBackground(String... params)
		          {
						 return true;
		          }

		        }.execute();
		        
		      }
		});

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.login, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	
	
	/*********启动客户端方法***********/
    public void Connect()
    {
            
       try 
       {
           InetAddress addr = InetAddress.getByName("10.0.213.117");//服务端手机网络IP地址，连一下wifi就可以知道
           System.out.println("客户端发出请求");
                 
           //客 户端向服务端发出连接请求
           Socket socket = new Socket(addr,6666);
           System.out.println("连接成功，socket=" + socket);
               
           //  通过该条socket通道得到输出流
           output = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);
           System.out.println("输出流获取成功");
           output.println(editTextUsername.getEditableText().toString());
           output.flush();
             

            
           /****/
           Intent intentdump =new Intent();
           intentdump.putExtra("username", editTextUsername.getText().toString());
           intentdump.putExtra("password", editTextPassword.getText().toString());
           //intentdump.setClass(LoginActivity.this, MainActivity.class);
           
           LoginActivity.this.startActivity(intentdump);
       }
       catch (Exception e) 
       {
           e.printStackTrace();
       }
             
    }
}
